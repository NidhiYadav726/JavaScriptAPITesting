{
  "stats": {
    "suites": 1,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2024-12-23T08:47:00.473Z",
    "end": "2024-12-23T08:47:10.685Z",
    "duration": 10212,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a8c3f88c-9ec2-4797-a202-740adc267616",
      "title": "",
      "fullFile": "/home/nashtech/api-testing-project/src/tests/userManagementTests.js",
      "file": "/src/tests/userManagementTests.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e0cf8c77-2c24-42bd-98f7-f4a782730663",
          "title": "GoRest User CRUD Operations",
          "fullFile": "/home/nashtech/api-testing-project/src/tests/userManagementTests.js",
          "file": "/src/tests/userManagementTests.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"GoRest User CRUD Operations\"",
              "fullTitle": "GoRest User CRUD Operations \"before all\" hook in \"GoRest User CRUD Operations\"",
              "timedOut": false,
              "duration": 9,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai = await import('chai');\nexpect = chai.expect;",
              "err": {},
              "uuid": "0fe18155-128d-48df-9ff7-3d9c3ab5c5f8",
              "parentUUID": "e0cf8c77-2c24-42bd-98f7-f4a782730663",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should create a new user with valid data",
              "fullTitle": "GoRest User CRUD Operations Should create a new user with valid data",
              "timedOut": false,
              "duration": 1259,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newUser = {\n  name: faker.name.fullName(),\n  email: faker.internet.email(),\n  gender: faker.helpers.arrayElement(['male', 'female']),\n  status: faker.helpers.arrayElement(['active', 'inactive']),\n};\nconst response = await createUser(newUser);\nexpect(response.status).to.equal(201);\nexpect(response.body).to.have.property('id');\nuserId = response.body.id; // Store the created user ID for future tests",
              "err": {},
              "uuid": "c8263a6c-26cc-499b-b26a-9d37065af5b2",
              "parentUUID": "e0cf8c77-2c24-42bd-98f7-f4a782730663",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should not create a user without a name",
              "fullTitle": "GoRest User CRUD Operations Should not create a user without a name",
              "timedOut": false,
              "duration": 1156,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidUser = {\n  email: faker.internet.email(),\n  gender: 'male',\n  status: 'active',\n};\nconst response = await createUser(invalidUser);\nexpect(response.status).to.equal(422); \nexpect(response.body).to.be.an('array').that.is.not.empty;\nexpect(response.body[0]).to.have.property('field').that.equals('name');\nexpect(response.body[0]).to.have.property('message').that.equals(\"can't be blank\");",
              "err": {},
              "uuid": "18e26efd-2ac4-4043-9b72-f2e687356191",
              "parentUUID": "e0cf8c77-2c24-42bd-98f7-f4a782730663",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should fetch the created user",
              "fullTitle": "GoRest User CRUD Operations Should fetch the created user",
              "timedOut": false,
              "duration": 1037,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await getUser(userId);\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property('id', userId);",
              "err": {},
              "uuid": "ae271be1-91ad-4075-8e0f-7fbc47d30e8c",
              "parentUUID": "e0cf8c77-2c24-42bd-98f7-f4a782730663",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return 404 when trying to fetch a user with an invalid ID",
              "fullTitle": "GoRest User CRUD Operations Should return 404 when trying to fetch a user with an invalid ID",
              "timedOut": false,
              "duration": 664,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidUserId = 999999; \nconst response = await getUser(invalidUserId);\nexpect(response.status).to.equal(404);\nexpect(response.body).to.have.property('message').that.equals(\"Resource not found\");",
              "err": {},
              "uuid": "a4dd6cfb-c1e0-4bda-8a7c-cc1334217333",
              "parentUUID": "e0cf8c77-2c24-42bd-98f7-f4a782730663",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should update the user details",
              "fullTitle": "GoRest User CRUD Operations Should update the user details",
              "timedOut": false,
              "duration": 786,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedData = { name: 'Updated Name', status: 'inactive' };\nconst response = await updateUser(userId, updatedData);\nexpect(response.status).to.equal(200);\nexpect(response.body.name).to.equal(updatedData.name);\nexpect(response.body.status).to.equal(updatedData.status);",
              "err": {},
              "uuid": "5ec1d9af-7a0c-41d7-a61c-352e1b8a9f94",
              "parentUUID": "e0cf8c77-2c24-42bd-98f7-f4a782730663",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should not update the user with invalid data",
              "fullTitle": "GoRest User CRUD Operations Should not update the user with invalid data",
              "timedOut": false,
              "duration": 1398,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidUpdate = { name: '', status: 'inactive' };\nconst response = await updateUser(userId, invalidUpdate);\nexpect(response.status).to.equal(422); // Unprocessable Entity\nexpect(response.body[0]).to.have.property('field').that.equals('name');\nexpect(response.body[0]).to.have.property('message').that.equals(\"can't be blank\");",
              "err": {},
              "uuid": "7a057e4c-ddc6-44f7-989f-f8a8959dde3c",
              "parentUUID": "e0cf8c77-2c24-42bd-98f7-f4a782730663",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should delete the created user",
              "fullTitle": "GoRest User CRUD Operations Should delete the created user",
              "timedOut": false,
              "duration": 817,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await deleteUser(userId);\nexpect(response.status).to.equal(204);",
              "err": {},
              "uuid": "013157c5-6699-4eb3-b43b-e429310da0df",
              "parentUUID": "e0cf8c77-2c24-42bd-98f7-f4a782730663",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return 404 when trying to delete a non-existing user",
              "fullTitle": "GoRest User CRUD Operations Should return 404 when trying to delete a non-existing user",
              "timedOut": false,
              "duration": 1128,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const nonExistingUserId = 999999; \nconst response = await deleteUser(nonExistingUserId);\nexpect(response.status).to.equal(404);\nexpect(response.body).to.have.property('message').that.equals(\"Resource not found\");",
              "err": {},
              "uuid": "21bd45e5-b0b4-40ca-aae6-f9fec1656fba",
              "parentUUID": "e0cf8c77-2c24-42bd-98f7-f4a782730663",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return 404 when trying to fetch a deleted user",
              "fullTitle": "GoRest User CRUD Operations Should return 404 when trying to fetch a deleted user",
              "timedOut": false,
              "duration": 1125,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await getUser(userId); // Fetching a deleted user\nexpect(response.status).to.equal(404);\nexpect(response.body).to.have.property('message').that.equals(\"Resource not found\");",
              "err": {},
              "uuid": "5e5ea918-fc9f-4604-8761-b185028d4608",
              "parentUUID": "e0cf8c77-2c24-42bd-98f7-f4a782730663",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return 404 when trying to update a deleted user",
              "fullTitle": "GoRest User CRUD Operations Should return 404 when trying to update a deleted user",
              "timedOut": false,
              "duration": 817,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedData = { name: 'Updated After Deletion', status: 'inactive' };\nconst response = await updateUser(userId, updatedData);\nexpect(response.status).to.equal(404);\nexpect(response.body).to.have.property('message').that.equals(\"Resource not found\");",
              "err": {},
              "uuid": "8d39bd13-44f3-4885-8bc5-3570192c7d10",
              "parentUUID": "e0cf8c77-2c24-42bd-98f7-f4a782730663",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c8263a6c-26cc-499b-b26a-9d37065af5b2",
            "18e26efd-2ac4-4043-9b72-f2e687356191",
            "ae271be1-91ad-4075-8e0f-7fbc47d30e8c",
            "a4dd6cfb-c1e0-4bda-8a7c-cc1334217333",
            "5ec1d9af-7a0c-41d7-a61c-352e1b8a9f94",
            "7a057e4c-ddc6-44f7-989f-f8a8959dde3c",
            "013157c5-6699-4eb3-b43b-e429310da0df",
            "21bd45e5-b0b4-40ca-aae6-f9fec1656fba",
            "5e5ea918-fc9f-4604-8761-b185028d4608",
            "8d39bd13-44f3-4885-8bc5-3570192c7d10"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10187,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report",
        "reportFilename": "report"
      },
      "version": "6.2.0"
    }
  }
}